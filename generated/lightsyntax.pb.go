// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: generated/lightsyntax.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CtyType int32

const (
	CtyType_Unknown       CtyType = 0
	CtyType_String        CtyType = 1
	CtyType_Bool          CtyType = 2
	CtyType_Number        CtyType = 3
	CtyType_List          CtyType = 4
	CtyType_Map           CtyType = 5
	CtyType_DynamicPseudo CtyType = 6
)

// Enum value maps for CtyType.
var (
	CtyType_name = map[int32]string{
		0: "Unknown",
		1: "String",
		2: "Bool",
		3: "Number",
		4: "List",
		5: "Map",
		6: "DynamicPseudo",
	}
	CtyType_value = map[string]int32{
		"Unknown":       0,
		"String":        1,
		"Bool":          2,
		"Number":        3,
		"List":          4,
		"Map":           5,
		"DynamicPseudo": 6,
	}
)

func (x CtyType) Enum() *CtyType {
	p := new(CtyType)
	*p = x
	return p
}

func (x CtyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CtyType) Descriptor() protoreflect.EnumDescriptor {
	return file_generated_lightsyntax_proto_enumTypes[0].Descriptor()
}

func (CtyType) Type() protoreflect.EnumType {
	return &file_generated_lightsyntax_proto_enumTypes[0]
}

func (x CtyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CtyType.Descriptor instead.
func (CtyType) EnumDescriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{0}
}

type TokenType int32

const (
	TokenType_TokenUnknown    TokenType = 0
	TokenType_OBrace          TokenType = 1
	TokenType_CBrace          TokenType = 2
	TokenType_OBrack          TokenType = 3
	TokenType_CBrack          TokenType = 4
	TokenType_OParen          TokenType = 5
	TokenType_CParen          TokenType = 6
	TokenType_OQuote          TokenType = 7
	TokenType_CQuote          TokenType = 8
	TokenType_OHeredoc        TokenType = 9
	TokenType_CHeredoc        TokenType = 10
	TokenType_Star            TokenType = 11
	TokenType_Slash           TokenType = 12
	TokenType_Plus            TokenType = 13
	TokenType_Minus           TokenType = 14
	TokenType_Percent         TokenType = 15
	TokenType_Equal           TokenType = 16
	TokenType_EqualOp         TokenType = 17
	TokenType_NotEqual        TokenType = 18
	TokenType_LessThan        TokenType = 19
	TokenType_LessThanEq      TokenType = 20
	TokenType_GreaterThan     TokenType = 21
	TokenType_GreaterThanEq   TokenType = 22
	TokenType_And             TokenType = 23
	TokenType_Or              TokenType = 24
	TokenType_Bang            TokenType = 25
	TokenType_Dot             TokenType = 26
	TokenType_Comma           TokenType = 27
	TokenType_Ellipsis        TokenType = 28
	TokenType_FatArrow        TokenType = 29
	TokenType_Question        TokenType = 30
	TokenType_Colon           TokenType = 31
	TokenType_TemplateInterp  TokenType = 32
	TokenType_TemplateControl TokenType = 33
	TokenType_TemplateSeqEnd  TokenType = 34
	TokenType_QuotedLit       TokenType = 35
	TokenType_StringLit       TokenType = 36
	TokenType_NumberLit       TokenType = 37
	TokenType_Ident           TokenType = 38
	TokenType_Comment         TokenType = 39
	TokenType_Newline         TokenType = 40
	TokenType_EOF             TokenType = 41
	TokenType_BitwiseAnd      TokenType = 42
	TokenType_BitwiseOr       TokenType = 43
	TokenType_BitwiseNot      TokenType = 44
	TokenType_BitwiseXor      TokenType = 45
	TokenType_StarStar        TokenType = 46
	TokenType_Apostrophe      TokenType = 47
	TokenType_Backtick        TokenType = 48
	TokenType_Semicolon       TokenType = 49
	TokenType_Tabs            TokenType = 50
	TokenType_Invalid         TokenType = 51
	TokenType_BadUTF8         TokenType = 52
	TokenType_QuotedNewline   TokenType = 53
	TokenType_Nil             TokenType = 54
)

// Enum value maps for TokenType.
var (
	TokenType_name = map[int32]string{
		0:  "TokenUnknown",
		1:  "OBrace",
		2:  "CBrace",
		3:  "OBrack",
		4:  "CBrack",
		5:  "OParen",
		6:  "CParen",
		7:  "OQuote",
		8:  "CQuote",
		9:  "OHeredoc",
		10: "CHeredoc",
		11: "Star",
		12: "Slash",
		13: "Plus",
		14: "Minus",
		15: "Percent",
		16: "Equal",
		17: "EqualOp",
		18: "NotEqual",
		19: "LessThan",
		20: "LessThanEq",
		21: "GreaterThan",
		22: "GreaterThanEq",
		23: "And",
		24: "Or",
		25: "Bang",
		26: "Dot",
		27: "Comma",
		28: "Ellipsis",
		29: "FatArrow",
		30: "Question",
		31: "Colon",
		32: "TemplateInterp",
		33: "TemplateControl",
		34: "TemplateSeqEnd",
		35: "QuotedLit",
		36: "StringLit",
		37: "NumberLit",
		38: "Ident",
		39: "Comment",
		40: "Newline",
		41: "EOF",
		42: "BitwiseAnd",
		43: "BitwiseOr",
		44: "BitwiseNot",
		45: "BitwiseXor",
		46: "StarStar",
		47: "Apostrophe",
		48: "Backtick",
		49: "Semicolon",
		50: "Tabs",
		51: "Invalid",
		52: "BadUTF8",
		53: "QuotedNewline",
		54: "Nil",
	}
	TokenType_value = map[string]int32{
		"TokenUnknown":    0,
		"OBrace":          1,
		"CBrace":          2,
		"OBrack":          3,
		"CBrack":          4,
		"OParen":          5,
		"CParen":          6,
		"OQuote":          7,
		"CQuote":          8,
		"OHeredoc":        9,
		"CHeredoc":        10,
		"Star":            11,
		"Slash":           12,
		"Plus":            13,
		"Minus":           14,
		"Percent":         15,
		"Equal":           16,
		"EqualOp":         17,
		"NotEqual":        18,
		"LessThan":        19,
		"LessThanEq":      20,
		"GreaterThan":     21,
		"GreaterThanEq":   22,
		"And":             23,
		"Or":              24,
		"Bang":            25,
		"Dot":             26,
		"Comma":           27,
		"Ellipsis":        28,
		"FatArrow":        29,
		"Question":        30,
		"Colon":           31,
		"TemplateInterp":  32,
		"TemplateControl": 33,
		"TemplateSeqEnd":  34,
		"QuotedLit":       35,
		"StringLit":       36,
		"NumberLit":       37,
		"Ident":           38,
		"Comment":         39,
		"Newline":         40,
		"EOF":             41,
		"BitwiseAnd":      42,
		"BitwiseOr":       43,
		"BitwiseNot":      44,
		"BitwiseXor":      45,
		"StarStar":        46,
		"Apostrophe":      47,
		"Backtick":        48,
		"Semicolon":       49,
		"Tabs":            50,
		"Invalid":         51,
		"BadUTF8":         52,
		"QuotedNewline":   53,
		"Nil":             54,
	}
)

func (x TokenType) Enum() *TokenType {
	p := new(TokenType)
	*p = x
	return p
}

func (x TokenType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TokenType) Descriptor() protoreflect.EnumDescriptor {
	return file_generated_lightsyntax_proto_enumTypes[1].Descriptor()
}

func (TokenType) Type() protoreflect.EnumType {
	return &file_generated_lightsyntax_proto_enumTypes[1]
}

func (x TokenType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TokenType.Descriptor instead.
func (TokenType) EnumDescriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{1}
}

type CtyList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*CtyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *CtyList) Reset() {
	*x = CtyList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtyList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtyList) ProtoMessage() {}

func (x *CtyList) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtyList.ProtoReflect.Descriptor instead.
func (*CtyList) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{0}
}

func (x *CtyList) GetValues() []*CtyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type CtyMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]*CtyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CtyMap) Reset() {
	*x = CtyMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtyMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtyMap) ProtoMessage() {}

func (x *CtyMap) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtyMap.ProtoReflect.Descriptor instead.
func (*CtyMap) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{1}
}

func (x *CtyMap) GetValues() map[string]*CtyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type CtyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CtyValueClause:
	//
	//	*CtyValue_StringValue
	//	*CtyValue_BoolValue
	//	*CtyValue_NumberValue
	//	*CtyValue_ListValue
	//	*CtyValue_MapValue
	CtyValueClause isCtyValue_CtyValueClause `protobuf_oneof:"CtyValueClause"`
}

func (x *CtyValue) Reset() {
	*x = CtyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtyValue) ProtoMessage() {}

func (x *CtyValue) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtyValue.ProtoReflect.Descriptor instead.
func (*CtyValue) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{2}
}

func (m *CtyValue) GetCtyValueClause() isCtyValue_CtyValueClause {
	if m != nil {
		return m.CtyValueClause
	}
	return nil
}

func (x *CtyValue) GetStringValue() string {
	if x, ok := x.GetCtyValueClause().(*CtyValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *CtyValue) GetBoolValue() bool {
	if x, ok := x.GetCtyValueClause().(*CtyValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *CtyValue) GetNumberValue() float64 {
	if x, ok := x.GetCtyValueClause().(*CtyValue_NumberValue); ok {
		return x.NumberValue
	}
	return 0
}

func (x *CtyValue) GetListValue() *CtyList {
	if x, ok := x.GetCtyValueClause().(*CtyValue_ListValue); ok {
		return x.ListValue
	}
	return nil
}

func (x *CtyValue) GetMapValue() *CtyMap {
	if x, ok := x.GetCtyValueClause().(*CtyValue_MapValue); ok {
		return x.MapValue
	}
	return nil
}

type isCtyValue_CtyValueClause interface {
	isCtyValue_CtyValueClause()
}

type CtyValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=stringValue,proto3,oneof"`
}

type CtyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=boolValue,proto3,oneof"`
}

type CtyValue_NumberValue struct {
	NumberValue float64 `protobuf:"fixed64,3,opt,name=numberValue,proto3,oneof"`
}

type CtyValue_ListValue struct {
	ListValue *CtyList `protobuf:"bytes,4,opt,name=listValue,proto3,oneof"`
}

type CtyValue_MapValue struct {
	MapValue *CtyMap `protobuf:"bytes,5,opt,name=mapValue,proto3,oneof"`
}

func (*CtyValue_StringValue) isCtyValue_CtyValueClause() {}

func (*CtyValue_BoolValue) isCtyValue_CtyValueClause() {}

func (*CtyValue_NumberValue) isCtyValue_CtyValueClause() {}

func (*CtyValue_ListValue) isCtyValue_CtyValueClause() {}

func (*CtyValue_MapValue) isCtyValue_CtyValueClause() {}

type CtyParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Description      string  `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Typ              CtyType `protobuf:"varint,3,opt,name=typ,proto3,enum=kinet.CtyType" json:"typ,omitempty"`
	AllowNull        bool    `protobuf:"varint,4,opt,name=allowNull,proto3" json:"allowNull,omitempty"`
	AllowDynamicType bool    `protobuf:"varint,5,opt,name=allowDynamicType,proto3" json:"allowDynamicType,omitempty"`
	AllowMarked      bool    `protobuf:"varint,6,opt,name=allowMarked,proto3" json:"allowMarked,omitempty"`
}

func (x *CtyParameter) Reset() {
	*x = CtyParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtyParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtyParameter) ProtoMessage() {}

func (x *CtyParameter) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtyParameter.ProtoReflect.Descriptor instead.
func (*CtyParameter) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{3}
}

func (x *CtyParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CtyParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CtyParameter) GetTyp() CtyType {
	if x != nil {
		return x.Typ
	}
	return CtyType_Unknown
}

func (x *CtyParameter) GetAllowNull() bool {
	if x != nil {
		return x.AllowNull
	}
	return false
}

func (x *CtyParameter) GetAllowDynamicType() bool {
	if x != nil {
		return x.AllowDynamicType
	}
	return false
}

func (x *CtyParameter) GetAllowMarked() bool {
	if x != nil {
		return x.AllowMarked
	}
	return false
}

type CtyFunction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string          `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Parameters  []*CtyParameter `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
	VarParam    *CtyParameter   `protobuf:"bytes,3,opt,name=varParam,proto3" json:"varParam,omitempty"`
}

func (x *CtyFunction) Reset() {
	*x = CtyFunction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtyFunction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtyFunction) ProtoMessage() {}

func (x *CtyFunction) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtyFunction.ProtoReflect.Descriptor instead.
func (*CtyFunction) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{4}
}

func (x *CtyFunction) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CtyFunction) GetParameters() []*CtyParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *CtyFunction) GetVarParam() *CtyParameter {
	if x != nil {
		return x.VarParam
	}
	return nil
}

type AnonSymbolExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AnonSymbolExpr) Reset() {
	*x = AnonSymbolExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnonSymbolExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnonSymbolExpr) ProtoMessage() {}

func (x *AnonSymbolExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnonSymbolExpr.ProtoReflect.Descriptor instead.
func (*AnonSymbolExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{5}
}

type Operation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Impl *CtyFunction `protobuf:"bytes,1,opt,name=impl,proto3" json:"impl,omitempty"`
	Typ  CtyType      `protobuf:"varint,2,opt,name=typ,proto3,enum=kinet.CtyType" json:"typ,omitempty"`
	Sign TokenType    `protobuf:"varint,3,opt,name=sign,proto3,enum=kinet.TokenType" json:"sign,omitempty"`
}

func (x *Operation) Reset() {
	*x = Operation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Operation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Operation) ProtoMessage() {}

func (x *Operation) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Operation.ProtoReflect.Descriptor instead.
func (*Operation) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{6}
}

func (x *Operation) GetImpl() *CtyFunction {
	if x != nil {
		return x.Impl
	}
	return nil
}

func (x *Operation) GetTyp() CtyType {
	if x != nil {
		return x.Typ
	}
	return CtyType_Unknown
}

func (x *Operation) GetSign() TokenType {
	if x != nil {
		return x.Sign
	}
	return TokenType_TokenUnknown
}

type BinaryOpExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LHS *Expression `protobuf:"bytes,1,opt,name=LHS,proto3" json:"LHS,omitempty"`
	Op  *Operation  `protobuf:"bytes,2,opt,name=op,proto3" json:"op,omitempty"`
	RHS *Expression `protobuf:"bytes,3,opt,name=RHS,proto3" json:"RHS,omitempty"`
}

func (x *BinaryOpExpr) Reset() {
	*x = BinaryOpExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinaryOpExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinaryOpExpr) ProtoMessage() {}

func (x *BinaryOpExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinaryOpExpr.ProtoReflect.Descriptor instead.
func (*BinaryOpExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{7}
}

func (x *BinaryOpExpr) GetLHS() *Expression {
	if x != nil {
		return x.LHS
	}
	return nil
}

func (x *BinaryOpExpr) GetOp() *Operation {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *BinaryOpExpr) GetRHS() *Expression {
	if x != nil {
		return x.RHS
	}
	return nil
}

type ConditionalExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Condition   *Expression `protobuf:"bytes,1,opt,name=condition,proto3" json:"condition,omitempty"`
	TrueResult  *Expression `protobuf:"bytes,2,opt,name=trueResult,proto3" json:"trueResult,omitempty"`
	FalseResult *Expression `protobuf:"bytes,3,opt,name=falseResult,proto3" json:"falseResult,omitempty"`
}

func (x *ConditionalExpr) Reset() {
	*x = ConditionalExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConditionalExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConditionalExpr) ProtoMessage() {}

func (x *ConditionalExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConditionalExpr.ProtoReflect.Descriptor instead.
func (*ConditionalExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{8}
}

func (x *ConditionalExpr) GetCondition() *Expression {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *ConditionalExpr) GetTrueResult() *Expression {
	if x != nil {
		return x.TrueResult
	}
	return nil
}

func (x *ConditionalExpr) GetFalseResult() *Expression {
	if x != nil {
		return x.FalseResult
	}
	return nil
}

type ForExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyVar   string      `protobuf:"bytes,1,opt,name=keyVar,proto3" json:"keyVar,omitempty"`
	ValVar   string      `protobuf:"bytes,2,opt,name=valVar,proto3" json:"valVar,omitempty"`
	CollExpr *Expression `protobuf:"bytes,3,opt,name=collExpr,proto3" json:"collExpr,omitempty"`
	KeyExpr  *Expression `protobuf:"bytes,4,opt,name=keyExpr,proto3" json:"keyExpr,omitempty"`
	ValExpr  *Expression `protobuf:"bytes,5,opt,name=valExpr,proto3" json:"valExpr,omitempty"`
	CondExpr *Expression `protobuf:"bytes,6,opt,name=condExpr,proto3" json:"condExpr,omitempty"`
	Grp      bool        `protobuf:"varint,7,opt,name=grp,proto3" json:"grp,omitempty"`
}

func (x *ForExpr) Reset() {
	*x = ForExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForExpr) ProtoMessage() {}

func (x *ForExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForExpr.ProtoReflect.Descriptor instead.
func (*ForExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{9}
}

func (x *ForExpr) GetKeyVar() string {
	if x != nil {
		return x.KeyVar
	}
	return ""
}

func (x *ForExpr) GetValVar() string {
	if x != nil {
		return x.ValVar
	}
	return ""
}

func (x *ForExpr) GetCollExpr() *Expression {
	if x != nil {
		return x.CollExpr
	}
	return nil
}

func (x *ForExpr) GetKeyExpr() *Expression {
	if x != nil {
		return x.KeyExpr
	}
	return nil
}

func (x *ForExpr) GetValExpr() *Expression {
	if x != nil {
		return x.ValExpr
	}
	return nil
}

func (x *ForExpr) GetCondExpr() *Expression {
	if x != nil {
		return x.CondExpr
	}
	return nil
}

func (x *ForExpr) GetGrp() bool {
	if x != nil {
		return x.Grp
	}
	return false
}

type FunctionCallExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Args []*Expression `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	// If true, the final argument should be a tuple, list or set which will
	// expand to be one argument per element.
	ExpandFinal bool `protobuf:"varint,3,opt,name=expandFinal,proto3" json:"expandFinal,omitempty"`
}

func (x *FunctionCallExpr) Reset() {
	*x = FunctionCallExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionCallExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionCallExpr) ProtoMessage() {}

func (x *FunctionCallExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionCallExpr.ProtoReflect.Descriptor instead.
func (*FunctionCallExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{10}
}

func (x *FunctionCallExpr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *FunctionCallExpr) GetArgs() []*Expression {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *FunctionCallExpr) GetExpandFinal() bool {
	if x != nil {
		return x.ExpandFinal
	}
	return false
}

type IndexExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collection *Expression `protobuf:"bytes,1,opt,name=collection,proto3" json:"collection,omitempty"`
	Key        *Expression `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *IndexExpr) Reset() {
	*x = IndexExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IndexExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IndexExpr) ProtoMessage() {}

func (x *IndexExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IndexExpr.ProtoReflect.Descriptor instead.
func (*IndexExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{11}
}

func (x *IndexExpr) GetCollection() *Expression {
	if x != nil {
		return x.Collection
	}
	return nil
}

func (x *IndexExpr) GetKey() *Expression {
	if x != nil {
		return x.Key
	}
	return nil
}

type LiteralValueExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Val *CtyValue `protobuf:"bytes,1,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *LiteralValueExpr) Reset() {
	*x = LiteralValueExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralValueExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralValueExpr) ProtoMessage() {}

func (x *LiteralValueExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralValueExpr.ProtoReflect.Descriptor instead.
func (*LiteralValueExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{12}
}

func (x *LiteralValueExpr) GetVal() *CtyValue {
	if x != nil {
		return x.Val
	}
	return nil
}

type ObjectConsItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyExpr   *Expression `protobuf:"bytes,1,opt,name=keyExpr,proto3" json:"keyExpr,omitempty"`
	ValueExpr *Expression `protobuf:"bytes,2,opt,name=valueExpr,proto3" json:"valueExpr,omitempty"`
}

func (x *ObjectConsItem) Reset() {
	*x = ObjectConsItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectConsItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectConsItem) ProtoMessage() {}

func (x *ObjectConsItem) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectConsItem.ProtoReflect.Descriptor instead.
func (*ObjectConsItem) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{13}
}

func (x *ObjectConsItem) GetKeyExpr() *Expression {
	if x != nil {
		return x.KeyExpr
	}
	return nil
}

func (x *ObjectConsItem) GetValueExpr() *Expression {
	if x != nil {
		return x.ValueExpr
	}
	return nil
}

type ObjectConsExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*ObjectConsItem `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
}

func (x *ObjectConsExpr) Reset() {
	*x = ObjectConsExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectConsExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectConsExpr) ProtoMessage() {}

func (x *ObjectConsExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectConsExpr.ProtoReflect.Descriptor instead.
func (*ObjectConsExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{14}
}

func (x *ObjectConsExpr) GetItems() []*ObjectConsItem {
	if x != nil {
		return x.Items
	}
	return nil
}

type ObjectConsKeyExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wrapped         *Expression `protobuf:"bytes,1,opt,name=wrapped,proto3" json:"wrapped,omitempty"`
	ForceNonLiteral bool        `protobuf:"varint,2,opt,name=forceNonLiteral,proto3" json:"forceNonLiteral,omitempty"`
}

func (x *ObjectConsKeyExpr) Reset() {
	*x = ObjectConsKeyExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectConsKeyExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectConsKeyExpr) ProtoMessage() {}

func (x *ObjectConsKeyExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectConsKeyExpr.ProtoReflect.Descriptor instead.
func (*ObjectConsKeyExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{15}
}

func (x *ObjectConsKeyExpr) GetWrapped() *Expression {
	if x != nil {
		return x.Wrapped
	}
	return nil
}

func (x *ObjectConsKeyExpr) GetForceNonLiteral() bool {
	if x != nil {
		return x.ForceNonLiteral
	}
	return false
}

type ParenthesesExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Expr *Expression `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *ParenthesesExpr) Reset() {
	*x = ParenthesesExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ParenthesesExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParenthesesExpr) ProtoMessage() {}

func (x *ParenthesesExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParenthesesExpr.ProtoReflect.Descriptor instead.
func (*ParenthesesExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{16}
}

func (x *ParenthesesExpr) GetExpr() *Expression {
	if x != nil {
		return x.Expr
	}
	return nil
}

type TraverseAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TraverseAttr) Reset() {
	*x = TraverseAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseAttr) ProtoMessage() {}

func (x *TraverseAttr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseAttr.ProtoReflect.Descriptor instead.
func (*TraverseAttr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{17}
}

func (x *TraverseAttr) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type TraverseIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *CtyValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *TraverseIndex) Reset() {
	*x = TraverseIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseIndex) ProtoMessage() {}

func (x *TraverseIndex) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseIndex.ProtoReflect.Descriptor instead.
func (*TraverseIndex) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{18}
}

func (x *TraverseIndex) GetKey() *CtyValue {
	if x != nil {
		return x.Key
	}
	return nil
}

type TraverseRoot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *TraverseRoot) Reset() {
	*x = TraverseRoot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TraverseRoot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TraverseRoot) ProtoMessage() {}

func (x *TraverseRoot) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TraverseRoot.ProtoReflect.Descriptor instead.
func (*TraverseRoot) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{19}
}

func (x *TraverseRoot) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Traverser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TraverserClause:
	//
	//	*Traverser_TAttr
	//	*Traverser_TIndex
	//	*Traverser_TRoot
	TraverserClause isTraverser_TraverserClause `protobuf_oneof:"TraverserClause"`
}

func (x *Traverser) Reset() {
	*x = Traverser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traverser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traverser) ProtoMessage() {}

func (x *Traverser) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traverser.ProtoReflect.Descriptor instead.
func (*Traverser) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{20}
}

func (m *Traverser) GetTraverserClause() isTraverser_TraverserClause {
	if m != nil {
		return m.TraverserClause
	}
	return nil
}

func (x *Traverser) GetTAttr() *TraverseAttr {
	if x, ok := x.GetTraverserClause().(*Traverser_TAttr); ok {
		return x.TAttr
	}
	return nil
}

func (x *Traverser) GetTIndex() *TraverseIndex {
	if x, ok := x.GetTraverserClause().(*Traverser_TIndex); ok {
		return x.TIndex
	}
	return nil
}

func (x *Traverser) GetTRoot() *TraverseRoot {
	if x, ok := x.GetTraverserClause().(*Traverser_TRoot); ok {
		return x.TRoot
	}
	return nil
}

type isTraverser_TraverserClause interface {
	isTraverser_TraverserClause()
}

type Traverser_TAttr struct {
	TAttr *TraverseAttr `protobuf:"bytes,1,opt,name=tAttr,proto3,oneof"`
}

type Traverser_TIndex struct {
	TIndex *TraverseIndex `protobuf:"bytes,2,opt,name=tIndex,proto3,oneof"`
}

type Traverser_TRoot struct {
	TRoot *TraverseRoot `protobuf:"bytes,3,opt,name=tRoot,proto3,oneof"`
}

func (*Traverser_TAttr) isTraverser_TraverserClause() {}

func (*Traverser_TIndex) isTraverser_TraverserClause() {}

func (*Traverser_TRoot) isTraverser_TraverserClause() {}

type RelativeTraversalExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source    *Expression  `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Traversal []*Traverser `protobuf:"bytes,2,rep,name=traversal,proto3" json:"traversal,omitempty"`
}

func (x *RelativeTraversalExpr) Reset() {
	*x = RelativeTraversalExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelativeTraversalExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelativeTraversalExpr) ProtoMessage() {}

func (x *RelativeTraversalExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelativeTraversalExpr.ProtoReflect.Descriptor instead.
func (*RelativeTraversalExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{21}
}

func (x *RelativeTraversalExpr) GetSource() *Expression {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *RelativeTraversalExpr) GetTraversal() []*Traverser {
	if x != nil {
		return x.Traversal
	}
	return nil
}

type ScopeTraversalExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Traversal []*Traverser `protobuf:"bytes,1,rep,name=traversal,proto3" json:"traversal,omitempty"`
}

func (x *ScopeTraversalExpr) Reset() {
	*x = ScopeTraversalExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScopeTraversalExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScopeTraversalExpr) ProtoMessage() {}

func (x *ScopeTraversalExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScopeTraversalExpr.ProtoReflect.Descriptor instead.
func (*ScopeTraversalExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{22}
}

func (x *ScopeTraversalExpr) GetTraversal() []*Traverser {
	if x != nil {
		return x.Traversal
	}
	return nil
}

type SplatExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *Expression     `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Each   *Expression     `protobuf:"bytes,2,opt,name=each,proto3" json:"each,omitempty"`
	Item   *AnonSymbolExpr `protobuf:"bytes,3,opt,name=item,proto3" json:"item,omitempty"`
}

func (x *SplatExpr) Reset() {
	*x = SplatExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SplatExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SplatExpr) ProtoMessage() {}

func (x *SplatExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SplatExpr.ProtoReflect.Descriptor instead.
func (*SplatExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{23}
}

func (x *SplatExpr) GetSource() *Expression {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SplatExpr) GetEach() *Expression {
	if x != nil {
		return x.Each
	}
	return nil
}

func (x *SplatExpr) GetItem() *AnonSymbolExpr {
	if x != nil {
		return x.Item
	}
	return nil
}

type TemplateExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parts []*Expression `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
}

func (x *TemplateExpr) Reset() {
	*x = TemplateExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateExpr) ProtoMessage() {}

func (x *TemplateExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateExpr.ProtoReflect.Descriptor instead.
func (*TemplateExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{24}
}

func (x *TemplateExpr) GetParts() []*Expression {
	if x != nil {
		return x.Parts
	}
	return nil
}

type TemplateJoinExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tuple *Expression `protobuf:"bytes,1,opt,name=tuple,proto3" json:"tuple,omitempty"`
}

func (x *TemplateJoinExpr) Reset() {
	*x = TemplateJoinExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateJoinExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateJoinExpr) ProtoMessage() {}

func (x *TemplateJoinExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateJoinExpr.ProtoReflect.Descriptor instead.
func (*TemplateJoinExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{25}
}

func (x *TemplateJoinExpr) GetTuple() *Expression {
	if x != nil {
		return x.Tuple
	}
	return nil
}

type TemplateWrapExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Wrapped *Expression `protobuf:"bytes,1,opt,name=wrapped,proto3" json:"wrapped,omitempty"`
}

func (x *TemplateWrapExpr) Reset() {
	*x = TemplateWrapExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateWrapExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateWrapExpr) ProtoMessage() {}

func (x *TemplateWrapExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateWrapExpr.ProtoReflect.Descriptor instead.
func (*TemplateWrapExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{26}
}

func (x *TemplateWrapExpr) GetWrapped() *Expression {
	if x != nil {
		return x.Wrapped
	}
	return nil
}

type TupleConsExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exprs []*Expression `protobuf:"bytes,1,rep,name=exprs,proto3" json:"exprs,omitempty"`
}

func (x *TupleConsExpr) Reset() {
	*x = TupleConsExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TupleConsExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TupleConsExpr) ProtoMessage() {}

func (x *TupleConsExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TupleConsExpr.ProtoReflect.Descriptor instead.
func (*TupleConsExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{27}
}

func (x *TupleConsExpr) GetExprs() []*Expression {
	if x != nil {
		return x.Exprs
	}
	return nil
}

type UnaryOpExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Op  *Operation  `protobuf:"bytes,1,opt,name=op,proto3" json:"op,omitempty"`
	Val *Expression `protobuf:"bytes,2,opt,name=val,proto3" json:"val,omitempty"`
}

func (x *UnaryOpExpr) Reset() {
	*x = UnaryOpExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnaryOpExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnaryOpExpr) ProtoMessage() {}

func (x *UnaryOpExpr) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnaryOpExpr.ProtoReflect.Descriptor instead.
func (*UnaryOpExpr) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{28}
}

func (x *UnaryOpExpr) GetOp() *Operation {
	if x != nil {
		return x.Op
	}
	return nil
}

func (x *UnaryOpExpr) GetVal() *Expression {
	if x != nil {
		return x.Val
	}
	return nil
}

type Expression struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExpressionClause:
	//
	//	*Expression_Asexpr
	//	*Expression_Boexpr
	//	*Expression_Cexpr
	//	*Expression_Fexpr
	//	*Expression_Fcexpr
	//	*Expression_Iexpr
	//	*Expression_Lvexpr
	//	*Expression_Ocexpr
	//	*Expression_Ockexpr
	//	*Expression_Pexpr
	//	*Expression_Rtexpr
	//	*Expression_Stexpr
	//	*Expression_Sexpr
	//	*Expression_Texpr
	//	*Expression_Tjexpr
	//	*Expression_Twexpr
	//	*Expression_Tcexpr
	//	*Expression_Uoexpr
	ExpressionClause isExpression_ExpressionClause `protobuf_oneof:"ExpressionClause"`
}

func (x *Expression) Reset() {
	*x = Expression{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expression) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expression) ProtoMessage() {}

func (x *Expression) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expression.ProtoReflect.Descriptor instead.
func (*Expression) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{29}
}

func (m *Expression) GetExpressionClause() isExpression_ExpressionClause {
	if m != nil {
		return m.ExpressionClause
	}
	return nil
}

func (x *Expression) GetAsexpr() *AnonSymbolExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Asexpr); ok {
		return x.Asexpr
	}
	return nil
}

func (x *Expression) GetBoexpr() *BinaryOpExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Boexpr); ok {
		return x.Boexpr
	}
	return nil
}

func (x *Expression) GetCexpr() *ConditionalExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Cexpr); ok {
		return x.Cexpr
	}
	return nil
}

func (x *Expression) GetFexpr() *ForExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Fexpr); ok {
		return x.Fexpr
	}
	return nil
}

func (x *Expression) GetFcexpr() *FunctionCallExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Fcexpr); ok {
		return x.Fcexpr
	}
	return nil
}

func (x *Expression) GetIexpr() *IndexExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Iexpr); ok {
		return x.Iexpr
	}
	return nil
}

func (x *Expression) GetLvexpr() *LiteralValueExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Lvexpr); ok {
		return x.Lvexpr
	}
	return nil
}

func (x *Expression) GetOcexpr() *ObjectConsExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Ocexpr); ok {
		return x.Ocexpr
	}
	return nil
}

func (x *Expression) GetOckexpr() *ObjectConsKeyExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Ockexpr); ok {
		return x.Ockexpr
	}
	return nil
}

func (x *Expression) GetPexpr() *ParenthesesExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Pexpr); ok {
		return x.Pexpr
	}
	return nil
}

func (x *Expression) GetRtexpr() *RelativeTraversalExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Rtexpr); ok {
		return x.Rtexpr
	}
	return nil
}

func (x *Expression) GetStexpr() *ScopeTraversalExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Stexpr); ok {
		return x.Stexpr
	}
	return nil
}

func (x *Expression) GetSexpr() *SplatExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Sexpr); ok {
		return x.Sexpr
	}
	return nil
}

func (x *Expression) GetTexpr() *TemplateExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Texpr); ok {
		return x.Texpr
	}
	return nil
}

func (x *Expression) GetTjexpr() *TemplateJoinExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Tjexpr); ok {
		return x.Tjexpr
	}
	return nil
}

func (x *Expression) GetTwexpr() *TemplateWrapExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Twexpr); ok {
		return x.Twexpr
	}
	return nil
}

func (x *Expression) GetTcexpr() *TupleConsExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Tcexpr); ok {
		return x.Tcexpr
	}
	return nil
}

func (x *Expression) GetUoexpr() *UnaryOpExpr {
	if x, ok := x.GetExpressionClause().(*Expression_Uoexpr); ok {
		return x.Uoexpr
	}
	return nil
}

type isExpression_ExpressionClause interface {
	isExpression_ExpressionClause()
}

type Expression_Asexpr struct {
	Asexpr *AnonSymbolExpr `protobuf:"bytes,1,opt,name=asexpr,proto3,oneof"`
}

type Expression_Boexpr struct {
	Boexpr *BinaryOpExpr `protobuf:"bytes,2,opt,name=boexpr,proto3,oneof"`
}

type Expression_Cexpr struct {
	Cexpr *ConditionalExpr `protobuf:"bytes,3,opt,name=cexpr,proto3,oneof"`
}

type Expression_Fexpr struct {
	Fexpr *ForExpr `protobuf:"bytes,4,opt,name=fexpr,proto3,oneof"`
}

type Expression_Fcexpr struct {
	Fcexpr *FunctionCallExpr `protobuf:"bytes,5,opt,name=fcexpr,proto3,oneof"`
}

type Expression_Iexpr struct {
	Iexpr *IndexExpr `protobuf:"bytes,6,opt,name=iexpr,proto3,oneof"`
}

type Expression_Lvexpr struct {
	Lvexpr *LiteralValueExpr `protobuf:"bytes,7,opt,name=lvexpr,proto3,oneof"`
}

type Expression_Ocexpr struct {
	Ocexpr *ObjectConsExpr `protobuf:"bytes,8,opt,name=ocexpr,proto3,oneof"`
}

type Expression_Ockexpr struct {
	Ockexpr *ObjectConsKeyExpr `protobuf:"bytes,9,opt,name=ockexpr,proto3,oneof"`
}

type Expression_Pexpr struct {
	Pexpr *ParenthesesExpr `protobuf:"bytes,10,opt,name=pexpr,proto3,oneof"`
}

type Expression_Rtexpr struct {
	Rtexpr *RelativeTraversalExpr `protobuf:"bytes,11,opt,name=rtexpr,proto3,oneof"`
}

type Expression_Stexpr struct {
	Stexpr *ScopeTraversalExpr `protobuf:"bytes,12,opt,name=stexpr,proto3,oneof"`
}

type Expression_Sexpr struct {
	Sexpr *SplatExpr `protobuf:"bytes,13,opt,name=sexpr,proto3,oneof"`
}

type Expression_Texpr struct {
	Texpr *TemplateExpr `protobuf:"bytes,14,opt,name=texpr,proto3,oneof"`
}

type Expression_Tjexpr struct {
	Tjexpr *TemplateJoinExpr `protobuf:"bytes,15,opt,name=tjexpr,proto3,oneof"`
}

type Expression_Twexpr struct {
	Twexpr *TemplateWrapExpr `protobuf:"bytes,16,opt,name=twexpr,proto3,oneof"`
}

type Expression_Tcexpr struct {
	Tcexpr *TupleConsExpr `protobuf:"bytes,17,opt,name=tcexpr,proto3,oneof"`
}

type Expression_Uoexpr struct {
	Uoexpr *UnaryOpExpr `protobuf:"bytes,18,opt,name=uoexpr,proto3,oneof"`
}

func (*Expression_Asexpr) isExpression_ExpressionClause() {}

func (*Expression_Boexpr) isExpression_ExpressionClause() {}

func (*Expression_Cexpr) isExpression_ExpressionClause() {}

func (*Expression_Fexpr) isExpression_ExpressionClause() {}

func (*Expression_Fcexpr) isExpression_ExpressionClause() {}

func (*Expression_Iexpr) isExpression_ExpressionClause() {}

func (*Expression_Lvexpr) isExpression_ExpressionClause() {}

func (*Expression_Ocexpr) isExpression_ExpressionClause() {}

func (*Expression_Ockexpr) isExpression_ExpressionClause() {}

func (*Expression_Pexpr) isExpression_ExpressionClause() {}

func (*Expression_Rtexpr) isExpression_ExpressionClause() {}

func (*Expression_Stexpr) isExpression_ExpressionClause() {}

func (*Expression_Sexpr) isExpression_ExpressionClause() {}

func (*Expression_Texpr) isExpression_ExpressionClause() {}

func (*Expression_Tjexpr) isExpression_ExpressionClause() {}

func (*Expression_Twexpr) isExpression_ExpressionClause() {}

func (*Expression_Tcexpr) isExpression_ExpressionClause() {}

func (*Expression_Uoexpr) isExpression_ExpressionClause() {}

type Attribute struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expr *Expression `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Attribute) Reset() {
	*x = Attribute{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Attribute) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Attribute) ProtoMessage() {}

func (x *Attribute) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Attribute.ProtoReflect.Descriptor instead.
func (*Attribute) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{30}
}

func (x *Attribute) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Attribute) GetExpr() *Expression {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string   `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Labels []string `protobuf:"bytes,2,rep,name=labels,proto3" json:"labels,omitempty"`
	Bdy    *Body    `protobuf:"bytes,3,opt,name=bdy,proto3" json:"bdy,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{31}
}

func (x *Block) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Block) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Block) GetBdy() *Body {
	if x != nil {
		return x.Bdy
	}
	return nil
}

type Body struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attributes map[string]*Attribute `protobuf:"bytes,1,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Blocks     []*Block              `protobuf:"bytes,2,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *Body) Reset() {
	*x = Body{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Body) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Body) ProtoMessage() {}

func (x *Body) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Body.ProtoReflect.Descriptor instead.
func (*Body) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{32}
}

func (x *Body) GetAttributes() map[string]*Attribute {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *Body) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bdy *Body  `protobuf:"bytes,1,opt,name=bdy,proto3" json:"bdy,omitempty"`
	Bts []byte `protobuf:"bytes,2,opt,name=bts,proto3" json:"bts,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_generated_lightsyntax_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_generated_lightsyntax_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_generated_lightsyntax_proto_rawDescGZIP(), []int{33}
}

func (x *File) GetBdy() *Body {
	if x != nil {
		return x.Bdy
	}
	return nil
}

func (x *File) GetBts() []byte {
	if x != nil {
		return x.Bts
	}
	return nil
}

var File_generated_lightsyntax_proto protoreflect.FileDescriptor

var file_generated_lightsyntax_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6b,
	0x69, 0x6e, 0x65, 0x74, 0x22, 0x32, 0x0a, 0x07, 0x43, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x27, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x06, 0x43, 0x74, 0x79,
	0x4d, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x74, 0x79, 0x4d,
	0x61, 0x70, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x1a, 0x4a, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43,
	0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xe1, 0x01, 0x0a, 0x08, 0x43, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x22, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1e, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x22, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2e, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x43, 0x74, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6b, 0x69, 0x6e, 0x65,
	0x74, 0x2e, 0x43, 0x74, 0x79, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x10, 0x0a, 0x0e, 0x43, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x0c, 0x43, 0x74, 0x79, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x03, 0x74, 0x79, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x43, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12,
	0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x12, 0x2a, 0x0a,
	0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x22, 0x95, 0x01, 0x0a, 0x0b,
	0x43, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x74, 0x79, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x2f, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x74, 0x79,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x08, 0x76, 0x61, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x22, 0x10, 0x0a, 0x0e, 0x41, 0x6e, 0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x22, 0x7b, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x69, 0x6d, 0x70, 0x6c, 0x12, 0x20, 0x0a, 0x03, 0x74, 0x79,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e,
	0x43, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x03, 0x74, 0x79, 0x70, 0x12, 0x24, 0x0a, 0x04,
	0x73, 0x69, 0x67, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x73, 0x69,
	0x67, 0x6e, 0x22, 0x7a, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x23, 0x0a, 0x03, 0x4c, 0x48, 0x53, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x4c, 0x48, 0x53, 0x12, 0x20, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f, 0x70, 0x12, 0x23, 0x0a, 0x03, 0x52, 0x48, 0x53,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x52, 0x48, 0x53, 0x22, 0xaa,
	0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x0a, 0x74, 0x72, 0x75, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x74, 0x72, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x33, 0x0a, 0x0b, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69,
	0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b,
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x83, 0x02, 0x0a, 0x07,
	0x46, 0x6f, 0x72, 0x45, 0x78, 0x70, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x56, 0x61,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x65, 0x79, 0x56, 0x61, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x76, 0x61, 0x6c, 0x56, 0x61, 0x72, 0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65,
	0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x6f,
	0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x70,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x76, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x76, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x2d, 0x0a, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x63, 0x6f, 0x6e, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x67, 0x72, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x67, 0x72,
	0x70, 0x22, 0x6f, 0x0a, 0x10, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
	0x6c, 0x45, 0x78, 0x70, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x61, 0x72, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x12, 0x20, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x46, 0x69, 0x6e,
	0x61, 0x6c, 0x22, 0x63, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x31, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x35, 0x0a, 0x10, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x76,
	0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74,
	0x2e, 0x43, 0x74, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x6e,
	0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x49, 0x74, 0x65, 0x6d,
	0x12, 0x2b, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2f, 0x0a,
	0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x22, 0x3d,
	0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72,
	0x12, 0x2b, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x6a, 0x0a,
	0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4e, 0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x66, 0x6f, 0x72, 0x63, 0x65, 0x4e,
	0x6f, 0x6e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x22, 0x38, 0x0a, 0x0f, 0x50, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x45, 0x78, 0x70, 0x72, 0x12, 0x25, 0x0a, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x65,
	0x78, 0x70, 0x72, 0x22, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41,
	0x74, 0x74, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x32, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x21, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x74,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x22, 0x0a, 0x0c, 0x54,
	0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0xa8, 0x01, 0x0a, 0x09, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x12, 0x2b, 0x0a,
	0x05, 0x74, 0x41, 0x74, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b,
	0x69, 0x6e, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x74, 0x74,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x74, 0x41, 0x74, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x48, 0x00, 0x52, 0x06, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x2b, 0x0a, 0x05, 0x74, 0x52,
	0x6f, 0x6f, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x69, 0x6e, 0x65,
	0x74, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x52, 0x6f, 0x6f, 0x74, 0x42, 0x11, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x22, 0x72, 0x0a, 0x15, 0x52, 0x65,
	0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45,
	0x78, 0x70, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x09, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x22, 0x44,
	0x0a, 0x12, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x09, 0x74, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61,
	0x6c, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e,
	0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x65, 0x72, 0x52, 0x09, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x22, 0x88, 0x01, 0x0a, 0x09, 0x53, 0x70, 0x6c, 0x61, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x12, 0x29, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x65, 0x61, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69,
	0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x65, 0x61, 0x63, 0x68, 0x12, 0x29, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x6e, 0x6f, 0x6e, 0x53,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x22,
	0x37, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x27, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x73, 0x22, 0x3b, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x72, 0x12, 0x27, 0x0a, 0x05,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69,
	0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05,
	0x74, 0x75, 0x70, 0x6c, 0x65, 0x22, 0x3f, 0x0a, 0x10, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x57, 0x72, 0x61, 0x70, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x07, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x22, 0x38, 0x0a, 0x0d, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x73, 0x45, 0x78, 0x70, 0x72, 0x12, 0x27, 0x0a, 0x05, 0x65, 0x78, 0x70, 0x72, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x65, 0x78, 0x70, 0x72, 0x73,
	0x22, 0x54, 0x0a, 0x0b, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x20, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x69,
	0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x02, 0x6f,
	0x70, 0x12, 0x23, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0x87, 0x07, 0x0a, 0x0a, 0x45, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x06, 0x61, 0x73, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x6e,
	0x6f, 0x6e, 0x53, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06,
	0x61, 0x73, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2d, 0x0a, 0x06, 0x62, 0x6f, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x62,
	0x6f, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x65, 0x78, 0x70, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x05,
	0x63, 0x65, 0x78, 0x70, 0x72, 0x12, 0x26, 0x0a, 0x05, 0x66, 0x65, 0x78, 0x70, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x6f, 0x72,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x05, 0x66, 0x65, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a,
	0x06, 0x66, 0x63, 0x65, 0x78, 0x70, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x66, 0x63, 0x65, 0x78, 0x70, 0x72,
	0x12, 0x28, 0x0a, 0x05, 0x69, 0x65, 0x78, 0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x45, 0x78, 0x70,
	0x72, 0x48, 0x00, 0x52, 0x05, 0x69, 0x65, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x6c, 0x76,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6c, 0x76, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2f, 0x0a,
	0x06, 0x6f, 0x63, 0x65, 0x78, 0x70, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x63, 0x65, 0x78, 0x70, 0x72, 0x12, 0x34,
	0x0a, 0x07, 0x6f, 0x63, 0x6b, 0x65, 0x78, 0x70, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x63, 0x6b,
	0x65, 0x78, 0x70, 0x72, 0x12, 0x2e, 0x0a, 0x05, 0x70, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x50, 0x61, 0x72, 0x65,
	0x6e, 0x74, 0x68, 0x65, 0x73, 0x65, 0x73, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x05, 0x70,
	0x65, 0x78, 0x70, 0x72, 0x12, 0x36, 0x0a, 0x06, 0x72, 0x74, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x52, 0x65, 0x6c,
	0x61, 0x74, 0x69, 0x76, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x72, 0x74, 0x65, 0x78, 0x70, 0x72, 0x12, 0x33, 0x0a, 0x06,
	0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x69, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x54, 0x72, 0x61, 0x76, 0x65, 0x72,
	0x73, 0x61, 0x6c, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x73, 0x74, 0x65, 0x78, 0x70,
	0x72, 0x12, 0x28, 0x0a, 0x05, 0x73, 0x65, 0x78, 0x70, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x6c, 0x61, 0x74, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x05, 0x73, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2b, 0x0a, 0x05, 0x74,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x45, 0x78, 0x70, 0x72, 0x48,
	0x00, 0x52, 0x05, 0x74, 0x65, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x74, 0x6a, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74,
	0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x78, 0x70,
	0x72, 0x48, 0x00, 0x52, 0x06, 0x74, 0x6a, 0x65, 0x78, 0x70, 0x72, 0x12, 0x31, 0x0a, 0x06, 0x74,
	0x77, 0x65, 0x78, 0x70, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x69,
	0x6e, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x57, 0x72, 0x61, 0x70,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x74, 0x77, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2e,
	0x0a, 0x06, 0x74, 0x63, 0x65, 0x78, 0x70, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x54, 0x75, 0x70, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x74, 0x63, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2c,
	0x0a, 0x06, 0x75, 0x6f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x06, 0x75, 0x6f, 0x65, 0x78, 0x70, 0x72, 0x42, 0x12, 0x0a, 0x10,
	0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65,
	0x22, 0x46, 0x0a, 0x09, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x25, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x52, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x1d, 0x0a,
	0x03, 0x62, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x6b, 0x69, 0x6e,
	0x65, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x03, 0x62, 0x64, 0x79, 0x22, 0xba, 0x01, 0x0a,
	0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x3b, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6b, 0x69, 0x6e, 0x65,
	0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x1a, 0x4f, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x69, 0x6e, 0x65, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x04, 0x46, 0x69, 0x6c,
	0x65, 0x12, 0x1d, 0x0a, 0x03, 0x62, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b,
	0x2e, 0x6b, 0x69, 0x6e, 0x65, 0x74, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x03, 0x62, 0x64, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x62, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x62,
	0x74, 0x73, 0x2a, 0x5e, 0x0a, 0x07, 0x43, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x10, 0x02,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x10, 0x05, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x73, 0x65, 0x75, 0x64, 0x6f,
	0x10, 0x06, 0x2a, 0xee, 0x05, 0x0a, 0x09, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x10, 0x0a, 0x0c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42, 0x72, 0x61, 0x63, 0x65, 0x10, 0x01, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x42, 0x72, 0x61, 0x63, 0x65, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x42,
	0x72, 0x61, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x42, 0x72, 0x61, 0x63, 0x6b,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10, 0x05, 0x12, 0x0a,
	0x0a, 0x06, 0x43, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x51,
	0x75, 0x6f, 0x74, 0x65, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x48, 0x65, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x10, 0x09,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x48, 0x65, 0x72, 0x65, 0x64, 0x6f, 0x63, 0x10, 0x0a, 0x12, 0x08,
	0x0a, 0x04, 0x53, 0x74, 0x61, 0x72, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x6c, 0x61, 0x73,
	0x68, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6c, 0x75, 0x73, 0x10, 0x0d, 0x12, 0x09, 0x0a,
	0x05, 0x4d, 0x69, 0x6e, 0x75, 0x73, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x65, 0x72, 0x63,
	0x65, 0x6e, 0x74, 0x10, 0x0f, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x10,
	0x12, 0x0b, 0x0a, 0x07, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x4f, 0x70, 0x10, 0x11, 0x12, 0x0c, 0x0a,
	0x08, 0x4e, 0x6f, 0x74, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x4c,
	0x65, 0x73, 0x73, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x13, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x65, 0x73,
	0x73, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x10, 0x14, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x10, 0x16, 0x12, 0x07, 0x0a,
	0x03, 0x41, 0x6e, 0x64, 0x10, 0x17, 0x12, 0x06, 0x0a, 0x02, 0x4f, 0x72, 0x10, 0x18, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x61, 0x6e, 0x67, 0x10, 0x19, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x6f, 0x74, 0x10,
	0x1a, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x10, 0x1b, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x6c, 0x6c, 0x69, 0x70, 0x73, 0x69, 0x73, 0x10, 0x1c, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x61,
	0x74, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x6e, 0x10,
	0x1f, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x70, 0x10, 0x20, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x53, 0x65, 0x71, 0x45, 0x6e, 0x64, 0x10, 0x22, 0x12, 0x0d,
	0x0a, 0x09, 0x51, 0x75, 0x6f, 0x74, 0x65, 0x64, 0x4c, 0x69, 0x74, 0x10, 0x23, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x10, 0x24, 0x12, 0x0d, 0x0a, 0x09,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x69, 0x74, 0x10, 0x25, 0x12, 0x09, 0x0a, 0x05, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x10, 0x26, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x10, 0x27, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x28,
	0x12, 0x07, 0x0a, 0x03, 0x45, 0x4f, 0x46, 0x10, 0x29, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x69, 0x74,
	0x77, 0x69, 0x73, 0x65, 0x41, 0x6e, 0x64, 0x10, 0x2a, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x69, 0x74,
	0x77, 0x69, 0x73, 0x65, 0x4f, 0x72, 0x10, 0x2b, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x69, 0x74, 0x77,
	0x69, 0x73, 0x65, 0x4e, 0x6f, 0x74, 0x10, 0x2c, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x69, 0x74, 0x77,
	0x69, 0x73, 0x65, 0x58, 0x6f, 0x72, 0x10, 0x2d, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72,
	0x53, 0x74, 0x61, 0x72, 0x10, 0x2e, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x70, 0x6f, 0x73, 0x74, 0x72,
	0x6f, 0x70, 0x68, 0x65, 0x10, 0x2f, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x61, 0x63, 0x6b, 0x74, 0x69,
	0x63, 0x6b, 0x10, 0x30, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x65, 0x6d, 0x69, 0x63, 0x6f, 0x6c, 0x6f,
	0x6e, 0x10, 0x31, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x61, 0x62, 0x73, 0x10, 0x32, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x10, 0x33, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x61,
	0x64, 0x55, 0x54, 0x46, 0x38, 0x10, 0x34, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x75, 0x6f, 0x74, 0x65,
	0x64, 0x4e, 0x65, 0x77, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x35, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x69,
	0x6c, 0x10, 0x36, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_generated_lightsyntax_proto_rawDescOnce sync.Once
	file_generated_lightsyntax_proto_rawDescData = file_generated_lightsyntax_proto_rawDesc
)

func file_generated_lightsyntax_proto_rawDescGZIP() []byte {
	file_generated_lightsyntax_proto_rawDescOnce.Do(func() {
		file_generated_lightsyntax_proto_rawDescData = protoimpl.X.CompressGZIP(file_generated_lightsyntax_proto_rawDescData)
	})
	return file_generated_lightsyntax_proto_rawDescData
}

var file_generated_lightsyntax_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_generated_lightsyntax_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_generated_lightsyntax_proto_goTypes = []interface{}{
	(CtyType)(0),                  // 0: kinet.CtyType
	(TokenType)(0),                // 1: kinet.TokenType
	(*CtyList)(nil),               // 2: kinet.CtyList
	(*CtyMap)(nil),                // 3: kinet.CtyMap
	(*CtyValue)(nil),              // 4: kinet.CtyValue
	(*CtyParameter)(nil),          // 5: kinet.CtyParameter
	(*CtyFunction)(nil),           // 6: kinet.CtyFunction
	(*AnonSymbolExpr)(nil),        // 7: kinet.AnonSymbolExpr
	(*Operation)(nil),             // 8: kinet.Operation
	(*BinaryOpExpr)(nil),          // 9: kinet.BinaryOpExpr
	(*ConditionalExpr)(nil),       // 10: kinet.ConditionalExpr
	(*ForExpr)(nil),               // 11: kinet.ForExpr
	(*FunctionCallExpr)(nil),      // 12: kinet.FunctionCallExpr
	(*IndexExpr)(nil),             // 13: kinet.IndexExpr
	(*LiteralValueExpr)(nil),      // 14: kinet.LiteralValueExpr
	(*ObjectConsItem)(nil),        // 15: kinet.ObjectConsItem
	(*ObjectConsExpr)(nil),        // 16: kinet.ObjectConsExpr
	(*ObjectConsKeyExpr)(nil),     // 17: kinet.ObjectConsKeyExpr
	(*ParenthesesExpr)(nil),       // 18: kinet.ParenthesesExpr
	(*TraverseAttr)(nil),          // 19: kinet.TraverseAttr
	(*TraverseIndex)(nil),         // 20: kinet.TraverseIndex
	(*TraverseRoot)(nil),          // 21: kinet.TraverseRoot
	(*Traverser)(nil),             // 22: kinet.Traverser
	(*RelativeTraversalExpr)(nil), // 23: kinet.RelativeTraversalExpr
	(*ScopeTraversalExpr)(nil),    // 24: kinet.ScopeTraversalExpr
	(*SplatExpr)(nil),             // 25: kinet.SplatExpr
	(*TemplateExpr)(nil),          // 26: kinet.TemplateExpr
	(*TemplateJoinExpr)(nil),      // 27: kinet.TemplateJoinExpr
	(*TemplateWrapExpr)(nil),      // 28: kinet.TemplateWrapExpr
	(*TupleConsExpr)(nil),         // 29: kinet.TupleConsExpr
	(*UnaryOpExpr)(nil),           // 30: kinet.UnaryOpExpr
	(*Expression)(nil),            // 31: kinet.Expression
	(*Attribute)(nil),             // 32: kinet.Attribute
	(*Block)(nil),                 // 33: kinet.Block
	(*Body)(nil),                  // 34: kinet.Body
	(*File)(nil),                  // 35: kinet.File
	nil,                           // 36: kinet.CtyMap.ValuesEntry
	nil,                           // 37: kinet.Body.AttributesEntry
}
var file_generated_lightsyntax_proto_depIdxs = []int32{
	4,  // 0: kinet.CtyList.values:type_name -> kinet.CtyValue
	36, // 1: kinet.CtyMap.values:type_name -> kinet.CtyMap.ValuesEntry
	2,  // 2: kinet.CtyValue.listValue:type_name -> kinet.CtyList
	3,  // 3: kinet.CtyValue.mapValue:type_name -> kinet.CtyMap
	0,  // 4: kinet.CtyParameter.typ:type_name -> kinet.CtyType
	5,  // 5: kinet.CtyFunction.parameters:type_name -> kinet.CtyParameter
	5,  // 6: kinet.CtyFunction.varParam:type_name -> kinet.CtyParameter
	6,  // 7: kinet.Operation.impl:type_name -> kinet.CtyFunction
	0,  // 8: kinet.Operation.typ:type_name -> kinet.CtyType
	1,  // 9: kinet.Operation.sign:type_name -> kinet.TokenType
	31, // 10: kinet.BinaryOpExpr.LHS:type_name -> kinet.Expression
	8,  // 11: kinet.BinaryOpExpr.op:type_name -> kinet.Operation
	31, // 12: kinet.BinaryOpExpr.RHS:type_name -> kinet.Expression
	31, // 13: kinet.ConditionalExpr.condition:type_name -> kinet.Expression
	31, // 14: kinet.ConditionalExpr.trueResult:type_name -> kinet.Expression
	31, // 15: kinet.ConditionalExpr.falseResult:type_name -> kinet.Expression
	31, // 16: kinet.ForExpr.collExpr:type_name -> kinet.Expression
	31, // 17: kinet.ForExpr.keyExpr:type_name -> kinet.Expression
	31, // 18: kinet.ForExpr.valExpr:type_name -> kinet.Expression
	31, // 19: kinet.ForExpr.condExpr:type_name -> kinet.Expression
	31, // 20: kinet.FunctionCallExpr.args:type_name -> kinet.Expression
	31, // 21: kinet.IndexExpr.collection:type_name -> kinet.Expression
	31, // 22: kinet.IndexExpr.key:type_name -> kinet.Expression
	4,  // 23: kinet.LiteralValueExpr.val:type_name -> kinet.CtyValue
	31, // 24: kinet.ObjectConsItem.keyExpr:type_name -> kinet.Expression
	31, // 25: kinet.ObjectConsItem.valueExpr:type_name -> kinet.Expression
	15, // 26: kinet.ObjectConsExpr.items:type_name -> kinet.ObjectConsItem
	31, // 27: kinet.ObjectConsKeyExpr.wrapped:type_name -> kinet.Expression
	31, // 28: kinet.ParenthesesExpr.expr:type_name -> kinet.Expression
	4,  // 29: kinet.TraverseIndex.key:type_name -> kinet.CtyValue
	19, // 30: kinet.Traverser.tAttr:type_name -> kinet.TraverseAttr
	20, // 31: kinet.Traverser.tIndex:type_name -> kinet.TraverseIndex
	21, // 32: kinet.Traverser.tRoot:type_name -> kinet.TraverseRoot
	31, // 33: kinet.RelativeTraversalExpr.source:type_name -> kinet.Expression
	22, // 34: kinet.RelativeTraversalExpr.traversal:type_name -> kinet.Traverser
	22, // 35: kinet.ScopeTraversalExpr.traversal:type_name -> kinet.Traverser
	31, // 36: kinet.SplatExpr.source:type_name -> kinet.Expression
	31, // 37: kinet.SplatExpr.each:type_name -> kinet.Expression
	7,  // 38: kinet.SplatExpr.item:type_name -> kinet.AnonSymbolExpr
	31, // 39: kinet.TemplateExpr.parts:type_name -> kinet.Expression
	31, // 40: kinet.TemplateJoinExpr.tuple:type_name -> kinet.Expression
	31, // 41: kinet.TemplateWrapExpr.wrapped:type_name -> kinet.Expression
	31, // 42: kinet.TupleConsExpr.exprs:type_name -> kinet.Expression
	8,  // 43: kinet.UnaryOpExpr.op:type_name -> kinet.Operation
	31, // 44: kinet.UnaryOpExpr.val:type_name -> kinet.Expression
	7,  // 45: kinet.Expression.asexpr:type_name -> kinet.AnonSymbolExpr
	9,  // 46: kinet.Expression.boexpr:type_name -> kinet.BinaryOpExpr
	10, // 47: kinet.Expression.cexpr:type_name -> kinet.ConditionalExpr
	11, // 48: kinet.Expression.fexpr:type_name -> kinet.ForExpr
	12, // 49: kinet.Expression.fcexpr:type_name -> kinet.FunctionCallExpr
	13, // 50: kinet.Expression.iexpr:type_name -> kinet.IndexExpr
	14, // 51: kinet.Expression.lvexpr:type_name -> kinet.LiteralValueExpr
	16, // 52: kinet.Expression.ocexpr:type_name -> kinet.ObjectConsExpr
	17, // 53: kinet.Expression.ockexpr:type_name -> kinet.ObjectConsKeyExpr
	18, // 54: kinet.Expression.pexpr:type_name -> kinet.ParenthesesExpr
	23, // 55: kinet.Expression.rtexpr:type_name -> kinet.RelativeTraversalExpr
	24, // 56: kinet.Expression.stexpr:type_name -> kinet.ScopeTraversalExpr
	25, // 57: kinet.Expression.sexpr:type_name -> kinet.SplatExpr
	26, // 58: kinet.Expression.texpr:type_name -> kinet.TemplateExpr
	27, // 59: kinet.Expression.tjexpr:type_name -> kinet.TemplateJoinExpr
	28, // 60: kinet.Expression.twexpr:type_name -> kinet.TemplateWrapExpr
	29, // 61: kinet.Expression.tcexpr:type_name -> kinet.TupleConsExpr
	30, // 62: kinet.Expression.uoexpr:type_name -> kinet.UnaryOpExpr
	31, // 63: kinet.Attribute.expr:type_name -> kinet.Expression
	34, // 64: kinet.Block.bdy:type_name -> kinet.Body
	37, // 65: kinet.Body.attributes:type_name -> kinet.Body.AttributesEntry
	33, // 66: kinet.Body.blocks:type_name -> kinet.Block
	34, // 67: kinet.File.bdy:type_name -> kinet.Body
	4,  // 68: kinet.CtyMap.ValuesEntry.value:type_name -> kinet.CtyValue
	32, // 69: kinet.Body.AttributesEntry.value:type_name -> kinet.Attribute
	70, // [70:70] is the sub-list for method output_type
	70, // [70:70] is the sub-list for method input_type
	70, // [70:70] is the sub-list for extension type_name
	70, // [70:70] is the sub-list for extension extendee
	0,  // [0:70] is the sub-list for field type_name
}

func init() { file_generated_lightsyntax_proto_init() }
func file_generated_lightsyntax_proto_init() {
	if File_generated_lightsyntax_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_generated_lightsyntax_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtyList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtyMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtyParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtyFunction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnonSymbolExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Operation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinaryOpExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConditionalExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionCallExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IndexExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralValueExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectConsItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectConsExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectConsKeyExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ParenthesesExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TraverseRoot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traverser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelativeTraversalExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScopeTraversalExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SplatExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateJoinExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateWrapExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TupleConsExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnaryOpExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expression); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Attribute); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Body); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_generated_lightsyntax_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_generated_lightsyntax_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*CtyValue_StringValue)(nil),
		(*CtyValue_BoolValue)(nil),
		(*CtyValue_NumberValue)(nil),
		(*CtyValue_ListValue)(nil),
		(*CtyValue_MapValue)(nil),
	}
	file_generated_lightsyntax_proto_msgTypes[20].OneofWrappers = []interface{}{
		(*Traverser_TAttr)(nil),
		(*Traverser_TIndex)(nil),
		(*Traverser_TRoot)(nil),
	}
	file_generated_lightsyntax_proto_msgTypes[29].OneofWrappers = []interface{}{
		(*Expression_Asexpr)(nil),
		(*Expression_Boexpr)(nil),
		(*Expression_Cexpr)(nil),
		(*Expression_Fexpr)(nil),
		(*Expression_Fcexpr)(nil),
		(*Expression_Iexpr)(nil),
		(*Expression_Lvexpr)(nil),
		(*Expression_Ocexpr)(nil),
		(*Expression_Ockexpr)(nil),
		(*Expression_Pexpr)(nil),
		(*Expression_Rtexpr)(nil),
		(*Expression_Stexpr)(nil),
		(*Expression_Sexpr)(nil),
		(*Expression_Texpr)(nil),
		(*Expression_Tjexpr)(nil),
		(*Expression_Twexpr)(nil),
		(*Expression_Tcexpr)(nil),
		(*Expression_Uoexpr)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_generated_lightsyntax_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_generated_lightsyntax_proto_goTypes,
		DependencyIndexes: file_generated_lightsyntax_proto_depIdxs,
		EnumInfos:         file_generated_lightsyntax_proto_enumTypes,
		MessageInfos:      file_generated_lightsyntax_proto_msgTypes,
	}.Build()
	File_generated_lightsyntax_proto = out.File
	file_generated_lightsyntax_proto_rawDesc = nil
	file_generated_lightsyntax_proto_goTypes = nil
	file_generated_lightsyntax_proto_depIdxs = nil
}
