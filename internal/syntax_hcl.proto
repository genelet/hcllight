syntax = "proto3";
package openapi.v3;
import "google/protobuf/any.proto";
option java_multiple_files = true;
option java_outer_classname = "OpenAPIProto";
option java_package = "org.openapi_v3";
option objc_class_prefix = "OAS";
option go_package = "./internal/hcl";

message AdditionalPropertiesItem {
  oneof oneof {
    SchemaOrReference schema_or_reference = 1;
    bool boolean = 2;
  }
}

message Any {
  google.protobuf.Any value = 1;
  string yaml = 2;
}

message AnyOrExpression {
  oneof oneof {
    Any any = 1;
    Expression expression = 2;
  }
}

message Callback {
  map<string,PathItem> path = 1;
}

message CallbackOrReference {
  oneof oneof {
    Callback callback = 1;
    Reference reference = 2;
  }
}

message Components {
  map<string,SchemaOrReference> schemas = 1;
  map<string,ResponseOrReference> responses = 2;
  map<string,ParameterOrReference> parameters = 3;
  map<string,ExampleOrReference> examples = 4;
  map<string,RequestBodyOrReference> request_bodies = 5;
  map<string,HeaderOrReference> headers = 6;
  map<string,SecuritySchemeOrReference> security_schemes = 7;
  map<string,LinkOrReference> links = 8;
  map<string,CallbackOrReference> callbacks = 9;
  map<string,Any> specification_extension = 10;
}

message Contact {
  string name = 1;
  string url = 2;
  string email = 3;
  map<string,Any> specification_extension = 4;
}

message DefaultType {
  oneof oneof {
    double number = 1;
    bool boolean = 2;
    string string = 3;
  }
}

message Discriminator {
  string property_name = 1;
  map<string,string> mapping = 2;
  map<string,Any> specification_extension = 3;
}

message Document {
  string openapi = 1;
  Info info = 2;
  repeated Server servers = 3;
  map<string,PathItem> paths = 4;
  Components components = 5;
  repeated SecurityRequirement security = 6;
  repeated Tag tags = 7;
  ExternalDocs external_docs = 8;
  map<string,Any> specification_extension = 9;
}

message Encoding {
  string content_type = 1;
  map<string,HeaderOrReference> headers = 2;
  string style = 3;
  bool explode = 4;
  bool allow_reserved = 5;
  map<string,Any> specification_extension = 6;
}

message Example {
  string summary = 1;
  string description = 2;
  Any value = 3;
  string external_value = 4;
  map<string,Any> specification_extension = 5;
}

message ExampleOrReference {
  oneof oneof {
    Example example = 1;
    Reference reference = 2;
  }
}

message Expression {
  map<string,Any> additional_properties = 1;
}

message ExternalDocs {
  string description = 1;
  string url = 2;
  map<string,Any> specification_extension = 3;
}

message Header {
  string description = 1;
  bool required = 2;
  bool deprecated = 3;
  bool allow_empty_value = 4;
  string style = 5;
  bool explode = 6;
  bool allow_reserved = 7;
  SchemaOrReference schema = 8;
  Any example = 9;
  map<string,ExampleOrReference> examples = 10;
  map<string,MediaType> content = 11;
  map<string,Any> specification_extension = 12;
}

message HeaderOrReference {
  oneof oneof {
    Header header = 1;
    Reference reference = 2;
  }
}

message Info {
  string title = 1;
  string description = 2;
  string terms_of_service = 3;
  Contact contact = 4;
  License license = 5;
  string version = 6;
  map<string,Any> specification_extension = 7;
  string summary = 8;
}

message License {
  string name = 1;
  string url = 2;
  map<string,Any> specification_extension = 3;
}

message Link {
  string operation_ref = 1;
  string operation_id = 2;
  AnyOrExpression parameters = 3;
  AnyOrExpression request_body = 4;
  string description = 5;
  Server server = 6;
  map<string,Any> specification_extension = 7;
}

message LinkOrReference {
  oneof oneof {
    Link link = 1;
    Reference reference = 2;
  }
}

message MediaType {
  SchemaOrReference schema = 1;
  Any example = 2;
  map<string,ExampleOrReference> examples = 3;
  map<string,Encoding> encoding = 4;
  map<string,Any> specification_extension = 5;
}

message OauthFlow {
  string authorization_url = 1;
  string token_url = 2;
  string refresh_url = 3;
  map<string,string> scopes = 4;
  map<string,Any> specification_extension = 5;
}

message OauthFlows {
  OauthFlow implicit = 1;
  OauthFlow password = 2;
  OauthFlow client_credentials = 3;
  OauthFlow authorization_code = 4;
  map<string,Any> specification_extension = 5;
}

message Operation {
  repeated string tags = 1;
  string summary = 2;
  string description = 3;
  ExternalDocs external_docs = 4;
  string operation_id = 5;
  repeated ParameterOrReference parameters = 6;
  RequestBodyOrReference request_body = 7;
  map<string,ResponseOrReference> responses = 8;
  map<string,CallbackOrReference> callbacks = 9;
  bool deprecated = 10;
  repeated SecurityRequirement security = 11;
  repeated Server servers = 12;
  map<string,Any> specification_extension = 13;
}

message Parameter {
  string name = 1;
  string in = 2;
  string description = 3;
  bool required = 4;
  bool deprecated = 5;
  bool allow_empty_value = 6;
  string style = 7;
  bool explode = 8;
  bool allow_reserved = 9;
  SchemaOrReference schema = 10;
  Any example = 11;
  map<string,ExampleOrReference> examples = 12;
  map<string,MediaType> content = 13;
  map<string,Any> specification_extension = 14;
}

message ParameterOrReference {
  oneof oneof {
    Parameter parameter = 1;
    Reference reference = 2;
  }
}

/*
message Oprations {
  map<string,Opration> operations = 1;
}

message PathItem {
  oneof oneof {
    Operations operationItems = 1;
    Reference reference = 2;
  }
}
*/

message PathItem {
  string _ref = 1;
  string summary = 2;
  string description = 3;
  Operation get = 4;
  Operation put = 5;
  Operation post = 6;
  Operation delete = 7;
  Operation options = 8;
  Operation head = 9;
  Operation patch = 10;
  Operation trace = 11;
  repeated Server servers = 12;
  repeated ParameterOrReference parameters = 13;
  map<string,Any> specification_extension = 14;
}

message Reference {
  string _ref = 1;
  string summary = 2;
  string description = 3;
}

message RequestBody {
  string description = 1;
  map<string,MediaType> content = 2;
  bool required = 3;
  map<string,Any> specification_extension = 4;
}

message RequestBodyOrReference {
  oneof oneof {
    RequestBody request_body = 1;
    Reference reference = 2;
  }
}

message Response {
  string description = 1;
  map<string,HeaderOrReference> headers = 2;
  map<string,MediaType> content = 3;
  map<string,LinkOrReference> links = 4;
  map<string,Any> specification_extension = 5;
}

message ResponseOrReference {
  oneof oneof {
    Response response = 1;
    Reference reference = 2;
  }
}

message OASCommon {
  bool required = 1;
  string title = 2;
  string description = 3;
  bool nullable = 4;
  bool deprecated = 5;
  Any example = 6;    
  Xml xml = 7;
  ExternalDocs external_docs = 8;
  map<string,Any> specification_extension = 9;
}

message OASString {
  OASCommon common = 1;
  string format = 2;
  int64 minLength = 3;
  int64 maxLength = 4;
  string pattern = 5;
  string default = 6;
  repeated Any enum = 7;
}

message OASNumber {
  OASCommon common = 1;
  string format = 2;
  double maximum = 3;
  double minimum = 4;
  double multiple_of = 5;
  bool exclusive_maximum = 6;
  bool exclusive_minimum = 7;
  double default = 8;
  repeated Any enum = 9;
}

message OASInteger {
  OASCommon common = 1;
  string format = 2;
  int64 maximum = 3;
  int64 minimum = 4;
  int64 multiple_of = 5;
  bool exclusive_maximum = 6;
  bool exclusive_minimum = 7;
  int64 default = 8;
  repeated Any enum = 9;
}

message OASBoolean {
  OASCommon common = 1;
  bool default = 2;
}
  
message OASArray {
  OASCommon common = 1;
  repeated SchemaOrReference items = 2;
  int64 max_items = 3;
  int64 min_items = 4;
  bool unique_items = 5;
  Discriminator discriminator = 6;
  SchemaOrReference not = 7;
}

message OASMap {
  OASCommon common = 1;
  AdditionalPropertiesItem additional_properties = 2;
}
  
message OASObject {
  OASCommon common = 1;
  map<string,SchemaOrReference> properties = 2;
  int64 max_properties = 3;
  int64 min_properties = 4;
  repeated string required = 5;
  bool read_only = 6;
  bool write_only = 7;
  Discriminator discriminator = 8;
  SchemaOrReference not = 9;
}

message Schema {
  bool nullable = 1;
  Discriminator discriminator = 2;
  bool read_only = 3;
  bool write_only = 4;
  Xml xml = 5;
  ExternalDocs external_docs = 6;
  Any example = 7;
  bool deprecated = 8;
  string title = 9;
  double multiple_of = 10;
  double maximum = 11;
  bool exclusive_maximum = 12;
  double minimum = 13;
  bool exclusive_minimum = 14;
  int64 max_length = 15;
  int64 min_length = 16;
  string pattern = 17;
  int64 max_items = 18;
  int64 min_items = 19;
  bool unique_items = 20;
  int64 max_properties = 21;
  int64 min_properties = 22;
  repeated string required = 23;
  repeated Any enum = 24;
  string type = 25;
  repeated SchemaOrReference all_of = 26;
  repeated SchemaOrReference one_of = 27;
  repeated SchemaOrReference any_of = 28;
  Schema not = 29;
  repeated SchemaOrReference items = 30;
  map<string,SchemaOrReference> properties = 31;
  AdditionalPropertiesItem additional_properties = 32;
  DefaultType default = 33;
  string description = 34;
  string format = 35;
  map<string,Any> specification_extension = 36;
}

message SchemaOrReference {
  oneof oneof {
    OASString string = 1;
    OASNumber number = 2;
    OASInteger integer = 3;
    OASBoolean boolean = 4;
    OASMap map = 5;
    OASObject object = 6;
    OASArray array = 7;
    OASArray oas_oneof = 8;
    OASArray oas_allof = 9;
    OASArray oas_anyof = 10;
    Reference reference = 11;
  }
}

message SecurityRequirement {
  map<string,StringArray> additional_properties = 1;
}

message SecurityScheme {
  string type = 1;
  string description = 2;
  string name = 3;
  string in = 4;
  string scheme = 5;
  string bearer_format = 6;
  OauthFlows flows = 7;
  string open_id_connect_url = 8;
  map<string,Any> specification_extension = 9;
}

message SecuritySchemeOrReference {
  oneof oneof {
    SecurityScheme security_scheme = 1;
    Reference reference = 2;
  }
}

message Server {
  string url = 1;
  string description = 2;
  map<string,ServerVariable> variables = 3;
  map<string,Any> specification_extension = 4;
}

message ServerVariable {
  repeated string enum = 1;
  string default = 2;
  string description = 3;
  map<string,Any> specification_extension = 4;
}

message StringArray {
  repeated string value = 1;
}

message Tag {
  string name = 1;
  string description = 2;
  ExternalDocs external_docs = 3;
  map<string,Any> specification_extension = 4;
}

message Xml {
  string name = 1;
  string namespace = 2;
  string prefix = 3;
  bool attribute = 4;
  bool wrapped = 5;
  map<string,Any> specification_extension = 6;
}
